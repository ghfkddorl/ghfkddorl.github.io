<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>content root on  [ 프로그래밍 일기장 ] </title>
    <link>https://ghfkddorl.github.io/</link>
    <description>Recent content in content root on  [ 프로그래밍 일기장 ] </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Apr 2019 01:36:28 +0900</lastBuildDate>
    
	<atom:link href="https://ghfkddorl.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>tf.get_variable()</title>
      <link>https://ghfkddorl.github.io/section_machine_learning/002_tf1/</link>
      <pubDate>Wed, 01 May 2019 01:36:37 +0900</pubDate>
      
      <guid>https://ghfkddorl.github.io/section_machine_learning/002_tf1/</guid>
      <description>tf.get_variable()은 Variable을 만들기 전에 같은 이름의 Variable이 있는지 확인할 수 있습니다. tf.variable_</description>
    </item>
    
    <item>
      <title>라그랑주 승수법</title>
      <link>https://ghfkddorl.github.io/section_machine_learning/003_gd/</link>
      <pubDate>Wed, 01 May 2019 01:36:37 +0900</pubDate>
      
      <guid>https://ghfkddorl.github.io/section_machine_learning/003_gd/</guid>
      <description>조건식이 있는 최적화 문제에서 정류점을 찾기위해 라그랑주 승수법을 이용합니다. 라그랑주 승수법에 대해 다룬 여러 글들을 보면 정류점에서 조건식과 목적함수의 기울</description>
    </item>
    
    <item>
      <title>제약이 있는 경사하강법</title>
      <link>https://ghfkddorl.github.io/section_machine_learning/001_gd/</link>
      <pubDate>Sun, 14 Apr 2019 23:20:53 +0900</pubDate>
      
      <guid>https://ghfkddorl.github.io/section_machine_learning/001_gd/</guid>
      <description>1. 경사하강법 경사하강접은 임의의 점에서 시작해 함수의 기울기가 가장 급격한 방향으로 계속해서 이동해 함수의 정류점에 도착하는 방법입니다. 이를 최적화 한다고 합</description>
    </item>
    
    <item>
      <title>이터러블-제너레이터(2)</title>
      <link>https://ghfkddorl.github.io/section_python/002_%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%942/</link>
      <pubDate>Sat, 06 Apr 2019 01:48:30 +0900</pubDate>
      
      <guid>https://ghfkddorl.github.io/section_python/002_%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%942/</guid>
      <description>파이썬은 itertools, functools 모듈과 내장 클래스를 통해 이터러블을 순환하는 다양한 방법을 제공합니다. 이 중 개인적으로 많이 사용하는 기능을 모아 정리했습니다. itertools, functo</description>
    </item>
    
    <item>
      <title>이터러블-제너레이터(3)</title>
      <link>https://ghfkddorl.github.io/section_python/003_%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%943/</link>
      <pubDate>Sat, 06 Apr 2019 01:48:29 +0900</pubDate>
      
      <guid>https://ghfkddorl.github.io/section_python/003_%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%943/</guid>
      <description>이터러블을 구현하다 보면 실제 기능은 대부분 이터레이터에서 구현하고 이터러블 객체는 단순히 이터레이터를 초기화 하기위해 필요한 값만 전달해 줍니다. 클래스를 하</description>
    </item>
    
    <item>
      <title>이터러블-제너레이터(1)</title>
      <link>https://ghfkddorl.github.io/section_python/001_%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%941/</link>
      <pubDate>Sat, 06 Apr 2019 01:48:25 +0900</pubDate>
      
      <guid>https://ghfkddorl.github.io/section_python/001_%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%941/</guid>
      <description>1. 이터러블(iterable), 이터레이터(iterator) 1 2 for string in [&amp;#39;hello&amp;#39;, &amp;#39;thank you&amp;#39;, &amp;#39;and you&amp;#39;]: print(string) 1 2 3 &amp;#39;hello&amp;#39; &amp;#39;thank you&amp;#39; &amp;#39;and you&amp;#39; 위 코드는 파이썬을 이용한 간단한 반복문 입니다</description>
    </item>
    
    <item>
      <title>마크마운 : 코드 넣기</title>
      <link>https://ghfkddorl.github.io/section_hugo/001_%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%BD%94%EB%93%9C%EB%84%A3%EA%B8%B0/post1/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ghfkddorl.github.io/section_hugo/001_%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%BD%94%EB%93%9C%EB%84%A3%EA%B8%B0/post1/</guid>
      <description>1. 코드 울타리와 인라인 코드 code = 1 2 3 4 5 6 7 8 [comment]: # (this is markdown) ```python import numpy as np import matplotlib.pyplot as plt x, y = np.random.normal(0.0, 1.0, (2, 100)) plt.scatter(x, y) plt.show() ``` result = 1 2 3 4 5 import numpy as np import matplotlib.pyplot as plt x, y = np.random.normal(0.0, 1.0, (2, 100)) plt.scatter(x,</description>
    </item>
    
    <item>
      <title>마크다운 : 수식 넣기</title>
      <link>https://ghfkddorl.github.io/section_hugo/002_%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%88%98%EC%8B%9D%EB%84%A3%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ghfkddorl.github.io/section_hugo/002_%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%88%98%EC%8B%9D%EB%84%A3%EA%B8%B0/</guid>
      <description>수학적 수식을 표현하기 위해 라텍스(Latex)를 주로 사용합니다. 그리고 Html 에서 라텍스를 쓸 수 있게 해주는 Mathjax 라이브러리가 있습니다. 사용 방법을 일반적인 자</description>
    </item>
    
  </channel>
</rss>